<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Victor Guerra&#39;s blog</title>
<link>https://vguerra.github.io/www/notes/index.html</link>
<atom:link href="https://vguerra.github.io/www/notes/index.xml" rel="self" type="application/rss+xml"/>
<description>Victor Guerra&#39;s blog posts</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Fri, 14 Apr 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Notes on MLIR</title>
  <dc:creator>Victor Guerra</dc:creator>
  <link>https://vguerra.github.io/www/notes/mlir/mlir-notes.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->



 ]]></description>
  <category>mlir</category>
  <category>compilers</category>
  <category>notes</category>
  <guid>https://vguerra.github.io/www/notes/mlir/mlir-notes.html</guid>
  <pubDate>Fri, 14 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A step by step guide to build the HELLO dialect for MLIR</title>
  <link>https://vguerra.github.io/www/notes/mlir/hello-dialect.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>The first step is to set up a CMake file to be able to build all the artifacts for our dialect. For that, we start with the simplest <code>CMakeList.txt</code> file possible:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cmake code-with-copy"><code class="sourceCode cmake"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">cmake_minimum_required</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">VERSION</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.20.0</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">project</span>(mlir-hello <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">LANGUAGES</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">CXX</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">C</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">CMAKE_CXX_STANDARD</span> 17 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">CACHE</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">STRING</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C++ standard to conform to"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">find_package</span>(MLIR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">REQUIRED</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">CONFIG</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">message</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">STATUS</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Using MLIRConfig.cmake in: </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">${MLIR_DIR}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">message</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">STATUS</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Using LLVMConfig.cmake in: </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">${LLVM_DIR}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>First, we name the project and specified the languages needed to build it. <code>C++</code> and <code>C</code> in this case.</p>
<p>Then we make sure that we locate the <code>MLIR</code> package (and <code>LLVM</code> subsequentially) and load its specific details.</p>
<p>This is the most basic <code>CMake</code> setup that you need to start working on your own dialect. You can already try to build your project, as follows:</p>



 ]]></description>
  <guid>https://vguerra.github.io/www/notes/mlir/hello-dialect.html</guid>
  <pubDate>Wed, 07 Jun 2023 16:06:06 GMT</pubDate>
</item>
<item>
  <title>Notes on MOJO</title>
  <link>https://vguerra.github.io/www/notes/mojo/advantages-mojo.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="advantages-of-using-mojo" class="level2">
<h2 class="anchored" data-anchor-id="advantages-of-using-mojo">Advantages of using Mojo</h2>
<ul>
<li>Powerful compile time metaprogramming</li>
<li>Integration of adaptive compilation techniques</li>
<li>Caching thorught the compilation flow</li>
<li>Leverages the MLIR ecosystem</li>
<li>Systems level programming</li>
<li>AI/ML</li>
<li>Member of the Python family (like the big brother of Python)
<ul>
<li>It is a superset of Python</li>
<li>Embraces Python ecosystem</li>
<li>Uses CPYthon to run Python3 out of the box</li>
<li>Migrator to move from Python to Mojo - you can progressively move code</li>
</ul></li>
</ul>
</section>
<section id="python-problems" class="level2">
<h2 class="anchored" data-anchor-id="python-problems">Python problems</h2>
<ul>
<li>Not suitable for systems programming</li>
<li>Complicated to build hybrid libraries (C/C++), requires low level understanding of CPython. The two world problem. Issues with debuggers, packaging is a pain.</li>
<li>Pushes the “graph based” paradigm, which is not very usable. (Pytorch 2 approach)</li>
<li>Deployment of Python based applications is challenging, specially when it comes to controlling dependencies.</li>
</ul>
</section>
<section id="other-approaches-to-improve-python" class="level2">
<h2 class="anchored" data-anchor-id="other-approaches-to-improve-python">Other approaches to improve Python</h2>
<ul>
<li><p>Improving CPython and JIT compiling: Great advances in CPython for Python 3.11 and Python 3.12 will include a trace optimizer. Great efforts but not help to get a unified language onto an accelerator. Systems programmers dont just seek performance, they also want a lot of “predictability and control” over how compute happens.</p></li>
<li><p>Python subsets: For example TorchScript, which uses Python like syntax, they can be easier to learn. Sadly not wide adoption. Generally dont interoperate with the Python ecosystem, missing tooling (debugger). This approaches attempt to solve a weak point of Python, but are not as good as Python’s strong points. This approaches drive fragmentation and incompatibility makes migration difficult.</p></li>
<li><p>Embedded DSLs in Python: Think of Python decorators. They maintain compatibility with all Python ecosystem. Unfortunately the mini-language usually dont integrate well with debuggers and other workflow tooling.</p></li>
</ul>
</section>
<section id="features" class="level1">
<h1>Features</h1>
<section id="let-and-var" class="level2">
<h2 class="anchored" data-anchor-id="let-and-var"><code>let</code> and <code>var</code></h2>
<p>Assign values to a name. <code>let</code> declarations are immutable, <code>var</code> declarations mutable. The values defined use lexical scoping and support name shadowing.</p>
<p>Support: type specifiers, patters and late initialization.</p>
</section>
<section id="structs" class="level2">
<h2 class="anchored" data-anchor-id="structs"><code>struct</code>s</h2>
<p>Static, bound at compile time (not lookedup with dictionary indirection) and inlined into their container. Not implicitly indirect nor reference counted.</p>
<p>All instance properties <em>must</em> be explicitly declared with <code>var</code> or <code>let</code>, which allows compiler to layout and access property values precisely in memory with no indirection or overhead. Compiler can guarantee static dispatch, use guarandteed static access to fields and inline a struct into the stack frame or enclosing type.</p>
</section>
<section id="strong-type-checking" class="level2">
<h2 class="anchored" data-anchor-id="strong-type-checking">Strong type checking</h2>
<p>One of the primary ways to do strong type checking is with <code>struct</code> type.</p>
</section>
<section id="overloaded-functionsfn-and-methodsdef" class="level2">
<h2 class="anchored" data-anchor-id="overloaded-functionsfn-and-methodsdef">Overloaded functions(<code>fn</code>) and methods(<code>def</code>)</h2>
<p>Mojo can infer the data types if you dont specify them, but you can define multiple functions with the same name but with different arguments, everywhere.</p>
<p>There is no support overloading soely on result type and does not use result type or contextual type information for type inference.</p>
<p><code>fn</code> definitions</p>


</section>
</section>

 ]]></description>
  <guid>https://vguerra.github.io/www/notes/mojo/advantages-mojo.html</guid>
  <pubDate>Wed, 07 Jun 2023 16:06:06 GMT</pubDate>
</item>
</channel>
</rss>
